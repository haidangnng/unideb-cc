@page "/courses/{Id}/test/create"
@using Shared.DTOs.Tests

@inject IMaterialService MaterialService
@inject ISnackbar Snackbar

<PageTitle>Create Test</PageTitle>

<MudText Typo="Typo.h4">Create Test</MudText>


<MudForm Style="width: 100%" Model="@testModel" @ref="form" Validation="@(testRequestValidator.ValidateValue)"
    ValidationDelay="0">
    <MudPaper Style="width: 100%; margin: auto; height: 100%" Class="my-4">
        <MudStepper @bind-ActiveStep="_activeStep" Linear="true" DisableNavigation="true">
            <MudStep Title="Test Details">
                <TestDetailForm Model="@testModel" />
            </MudStep>

            <MudStep Title="Settings">
                <TestSettingForm Model="@testModel" />
            </MudStep>

            <MudStep Title="Add Questions">
                <TestQuestionForm Model="@testModel" />
            </MudStep>

            <MudStep Title="Review">
                @* <TestStepReview Model="testModel" OnPublish="SubmitTest" /> *@
            </MudStep>

        </MudStepper>
    </MudPaper>
</MudForm>

@code {
    [Parameter] public string Id { get; set; }
    private int _activeStep = 0;
    private MudForm form;
    private CreateTestDTO testModel = new();
    private CreateTestFluentValidator testRequestValidator = new();

    private async Task SubmitTest()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            Snackbar.Add("Please fix errors before submitting.", Severity.Error);
            return;
        }

        // Do the submit
        Snackbar.Add("Test submitted successfully!", Severity.Success);
    }
}
