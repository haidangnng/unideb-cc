@page "/courses/{Id}/test/create"
@using Shared.DTOs.Tests
@using System.Text.Json;
@inject IMaterialService MaterialService
@inject ISnackbar Snackbar

<PageTitle>Create Test</PageTitle>

<MudText Typo="Typo.h4">Create Test</MudText>


<MudForm Style="width: 100%" Model="@testModel" @ref="form" Validation="@(testRequestValidator.ValidateValue)"
    ValidationDelay="0">
    <MudPaper Style="width: 100%; margin: auto; height: 100%" Class="my-4">
        <MudStepper @bind-ActiveIndex="_activeStep" Linear="true" DisableNavigation="true">
            <ChildContent>
                <MudStep Title="Test Details">
                    <TestDetailForm Model="@testModel" />
                </MudStep>

                <MudStep Title="Settings">
                    <TestSettingForm Model="@testModel" Materials="Materials" />
                </MudStep>

                <MudStep Title="Add Questions">
                    <TestQuestionForm Model="@testModel" />
                </MudStep>

                <MudStep Title="Review">
                    <TestReviewForm Model="testModel" />
                </MudStep>
            </ChildContent>

            <ActionContent Context="stepper">
                @if (!_completed)
                {
                    <MudButton OnClick="@(() => stepper.PreviousStepAsync())" Color="Color.Primary"
                        Disabled="@(_activeStep <= 0)">Previous</MudButton>
                    <MudSpacer />

                    if (_activeStep != 3)
                    {
                        <MudButton OnClick="@(() => stepper.NextStepAsync())" Color="Color.Primary">
                            Next</MudButton>
                    }
                    else
                    {
                        <MudButton Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" OnClick="SubmitTestAsync">
                            Complete</MudButton>
                    }
                }
            </ActionContent>
        </MudStepper>
    </MudPaper>
</MudForm>

@code {
    [Parameter] public string Id { get; set; }
    private bool _completed;
    private int _activeStep = 0;
    private MudForm form;
    private CreateTestDTO testModel = new();
    private CreateTestFluentValidator testRequestValidator = new();

    public List<Material> Materials { get; set; }

    private async Task SubmitTestAsync()
    {
        await form.Validate();

        Console.WriteLine(JsonSerializer.Serialize(testModel, new JsonSerializerOptions { WriteIndented = true }));

        if (!form.IsValid)
        {
            Snackbar.Add("Please fix errors before submitting.", Severity.Error);
            return;
        }

        Snackbar.Add("Test submitted successfully!", Severity.Success);
    }

    private async Task GetMaterials()
    {
        try
        {
            Materials = await MaterialService.GetMaterialsByCourseId(Int32.Parse(Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load courses: {ex.Message}", Severity.Error);
            Materials = new List<Material>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetMaterials();
    }
}
