@page "/courses/{Id}"

@inject IMaterialService MaterialService
@inject IUserService UserService
@inject ITestService TestService
@inject ICourseClientService CourseClientService
@inject ISnackbar Snackbar

<PageTitle>Course Detail</PageTitle>

<MudText Typo="Typo.h4">Course name</MudText>

<MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Materials">
        <MaterialList Id="@Id" Materials="@Materials" />
    </MudTabPanel>
    <MudTabPanel Text="Tests">
        <TestList Id="@Id" Tests="@Tests" />
    </MudTabPanel>
    <MudTabPanel Text="Course Students">
        <StudentTable Users="@CourseStudents" @key="CourseStudents" />
    </MudTabPanel>
    <MudTabPanel Text="Enroll Students">
        <StudentTable Users="@AvailableStudents" OnEnroll="@EnrollStudent" @key="AvailableStudents" />
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public string Id { get; set; } = String.Empty;

    public List<User> AvailableStudents { get; private set; }
    public List<Material> Materials { get; set; }
    public List<TestDetailDTO> Tests { get; set; }
    public List<User> CourseStudents { get; set; }

    private async Task GetMaterials()
    {
        try
        {
            Materials = await MaterialService.GetMaterialsByCourseId(Int32.Parse(Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load courses: {ex.Message}", Severity.Error);
            Materials = new List<Material>();
        }
    }
    private async Task GetTests()
    {
        try
        {
            Tests = await TestService.GetTestByCourseId(Int32.Parse(Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load courses: {ex.Message}", Severity.Error);
            Tests = new List<TestDetailDTO>();
        }
    }

    private async Task GetStudentsByCourseId()
    {
        try
        {
            CourseStudents = await UserService.GetStudentByCourseId(Int32.Parse(Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load courses: {ex.Message}", Severity.Error);
            CourseStudents = new List<User>();
        }
    }

    private async Task GetAllAvailStudents()
    {
        try
        {
            AvailableStudents = await UserService.GetStudentNotCourseId(Int32.Parse(Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load students.", Severity.Error);
            Console.WriteLine($"[StudentsPage] Error: {ex.Message}");
            AvailableStudents = new List<User>();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(GetTests(), GetMaterials(), GetStudentsByCourseId(), GetAllAvailStudents());
    }
    private async Task EnrollStudent(User student)
    {
        try
        {
            await CourseClientService.EnrollStudentAsync(Int32.Parse(Id), student.Id);

            Snackbar.Add($"{student.Username} enrolled successfully!", Severity.Success);
            await Task.WhenAll(GetStudentsByCourseId(), GetAllAvailStudents());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to enroll student: {ex.Message}", Severity.Error);
        }
    }
}