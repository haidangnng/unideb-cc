@page "/courses/{Id}"

@inject IMaterialService MaterialService
@inject ISnackbar Snackbar

<PageTitle>Course Detail</PageTitle>

<MudText Typo="Typo.h4">Course name</MudText>

<Block Title="Materials" IsEmpty="!(Materials != null && Materials.Any())" EmptyDesc="No materials available">
    <ActionButton>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Outlined"
            Href=@($"/courses/{Id}/upload")>Upload
            materials</MudButton>
    </ActionButton>

    <ChildContent>
        <MudGrid>
            @foreach (var item in Materials)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudLink Href="@item.Url" Target="_blank">
                        <MudCard Class="mud-width-full">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@item.FileName</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudLink>
                </MudItem>

            }
        </MudGrid>
    </ChildContent>
</Block>

@* <Block Title="Test" IsEmpty="!(Items != null && Items.Any())" EmptyDesc="No tests available">

    <ActionButton>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Outlined"
            Href=@($"/courses/{Id}/test/create")>Create Test
        </MudButton>
    </ActionButton>

    <ChildContent>
        <div class="mud-grid mud-grid-spacing-xs-2">
            @foreach (var item in Items)
            {
                <MudCard Class="p-4 mud-width-full">
                    <MudCardContent>
                    </MudCardContent>
                </MudCard>
            }
        </div>
    </ChildContent>

</Block> *@

@code {
    [Parameter] public string Id { get; set; } = String.Empty;

    public List<Material> Materials { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Materials = await MaterialService.GetMaterialsByCourseId(Int32.Parse(Id));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load courses: {ex.Message}", Severity.Error);
            Materials = new List<Material>();
        }
    }
}