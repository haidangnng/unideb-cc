@page "/courses/create"
@using FluentValidation
@using Shared.DTOs.Courses
@inject ICourseClientService CourseService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Create Course</PageTitle>

<MudPaper Class="pa-4 mx-auto" MaxWidth="500px">
    <MudForm Model="@model" @ref="form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField Label="Title" @bind-Value="model.Title" For="@(() => model.Title)" Immediate="true" />
            <MudTextField Label="Description" @bind-Value="model.Description" For="@(() => model.Description)"
                Immediate="true" />
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Submit">
                Create Course
            </MudButton>
        </MudCardActions>
    </MudForm>
</MudPaper>

@code {
    private MudForm form;
    private CourseCreateDto model = new();
    private CourseCreateValidator validator = new();

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                var result = await CourseService.CreateCourseAsync(model);
                Snackbar.Add("Course created successfully!", MudBlazor.Severity.Success);
                Navigation.NavigateTo("/courses");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }

    public class CourseCreateValidator : AbstractValidator<CourseCreateDto>
    {
        public CourseCreateValidator()
        {
            RuleFor(x => x.Title)
            .NotEmpty().WithMessage("Title is required")
            .MaximumLength(100);

            RuleFor(x => x.Description)
            .NotEmpty().WithMessage("Description is required")
            .MaximumLength(500);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue =>
        async (model, propertyName) =>
        {
            var context = ValidationContext<CourseCreateDto>.CreateWithOptions((CourseCreateDto)model, x =>
    x.IncludeProperties(propertyName));
            var result = await ValidateAsync(context);
            return result.IsValid
    ? Array.Empty<string>()
    : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
